initialise-binding(initialise-storing(initialise-giving(finalise-failing(scope(recursive(set("Element", "List", "LL"), collateral(map(tuple("Element", class(thunk(closure(reference(object(fresh-atom, "Element", collateral(map(tuple("Age", allocate-initialised-variable(integers, 0))), map(tuple("Salary", allocate-initialised-variable(integers, 0))), map(tuple("Married", allocate-initialised-variable(booleans, false)))))))), collateral(map(tuple("Init", function(closure(scope(collateral(match(given, tuple(pattern(abstraction(map(tuple("this", allocate-initialised-variable(pointers(objects), given))))), pattern(abstraction(map(tuple("v_Age", allocate-initialised-variable(integers, given))))), pattern(abstraction(map(tuple("v_Salary", allocate-initialised-variable(integers, given))))), pattern(abstraction(map(tuple("v_Married", allocate-initialised-variable(booleans, given))))))), object-single-inheritance-feature-map(checked(dereference(first(tuple-elements(given))))), collateral()), sequential(assign(bound("Age"), assigned(bound("v_Age"))), assign(bound("Salary"), assigned(bound("v_Salary"))), assign(bound("Married"), assigned(bound("v_Married"))), true)))))), map(tuple("GetAge", function(closure(scope(collateral(match(given, tuple(pattern(abstraction(map(tuple("this", allocate-initialised-variable(pointers(objects), given))))))), object-single-inheritance-feature-map(checked(dereference(first(tuple-elements(given))))), collateral()), sequential(assigned(bound("Age")))))))), map(tuple("GetSalary", function(closure(scope(collateral(match(given, tuple(pattern(abstraction(map(tuple("this", allocate-initialised-variable(pointers(objects), given))))))), object-single-inheritance-feature-map(checked(dereference(first(tuple-elements(given))))), collateral()), sequential(assigned(bound("Salary")))))))), map(tuple("GetMarried", function(closure(scope(collateral(match(given, tuple(pattern(abstraction(map(tuple("this", allocate-initialised-variable(pointers(objects), given))))))), object-single-inheritance-feature-map(checked(dereference(first(tuple-elements(given))))), collateral()), sequential(assigned(bound("Married")))))))), map(tuple("Equal", function(closure(scope(collateral(match(given, tuple(pattern(abstraction(map(tuple("this", allocate-initialised-variable(pointers(objects), given))))), pattern(abstraction(map(tuple("other", allocate-initialised-variable(pointers(objects), given))))))), object-single-inheritance-feature-map(checked(dereference(first(tuple-elements(given))))), collateral(map(tuple("ret_val", allocate-initialised-variable(booleans, false))), map(tuple("aux01", allocate-initialised-variable(integers, 0))), map(tuple("aux02", allocate-initialised-variable(integers, 0))), map(tuple("nt", allocate-initialised-variable(integers, 0))))), sequential(assign(bound("ret_val"), true), assign(bound("aux01"), give(assigned(bound("other")), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "GetAge"), tuple(given)))), if-true-else(not(give(assigned(bound("this")), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "Compare"), tuple(given, assigned(bound("aux01")), assigned(bound("Age")))))), assign(bound("ret_val"), false), sequential(assign(bound("aux02"), give(assigned(bound("other")), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "GetSalary"), tuple(given)))), if-true-else(not(give(assigned(bound("this")), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "Compare"), tuple(given, assigned(bound("aux02")), assigned(bound("Salary")))))), assign(bound("ret_val"), false), if-true-else(assigned(bound("Married")), if-true-else(not(give(assigned(bound("other")), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "GetMarried"), tuple(given)))), assign(bound("ret_val"), false), assign(bound("nt"), 0)), if-true-else(give(assigned(bound("other")), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "GetMarried"), tuple(given))), assign(bound("ret_val"), false), assign(bound("nt"), 0)))))), assigned(bound("ret_val")))))))), map(tuple("Compare", function(closure(scope(collateral(match(given, tuple(pattern(abstraction(map(tuple("this", allocate-initialised-variable(pointers(objects), given))))), pattern(abstraction(map(tuple("num1", allocate-initialised-variable(integers, given))))), pattern(abstraction(map(tuple("num2", allocate-initialised-variable(integers, given))))))), object-single-inheritance-feature-map(checked(dereference(first(tuple-elements(given))))), collateral(map(tuple("retval", allocate-initialised-variable(booleans, false))), map(tuple("aux02", allocate-initialised-variable(integers, 0))))), sequential(assign(bound("retval"), false), assign(bound("aux02"), integer-add(assigned(bound("num2")), 1)), if-true-else(integer-is-less(assigned(bound("num1")), assigned(bound("num2"))), assign(bound("retval"), false), if-true-else(not(integer-is-less(assigned(bound("num1")), assigned(bound("aux02")))), assign(bound("retval"), false), assign(bound("retval"), true))), assigned(bound("retval")))))))))))), map(tuple("List", class(thunk(closure(reference(object(fresh-atom, "List", collateral(map(tuple("elem", allocate-initialised-variable(pointers(objects), pointer-null))), map(tuple("next", allocate-initialised-variable(pointers(objects), pointer-null))), map(tuple("end", allocate-initialised-variable(booleans, false)))))))), collateral(map(tuple("Init", function(closure(scope(collateral(match(given, tuple(pattern(abstraction(map(tuple("this", allocate-initialised-variable(pointers(objects), given))))))), object-single-inheritance-feature-map(checked(dereference(first(tuple-elements(given))))), collateral()), sequential(assign(bound("end"), true), true)))))), map(tuple("InitNew", function(closure(scope(collateral(match(given, tuple(pattern(abstraction(map(tuple("this", allocate-initialised-variable(pointers(objects), given))))), pattern(abstraction(map(tuple("v_elem", allocate-initialised-variable(pointers(objects), given))))), pattern(abstraction(map(tuple("v_next", allocate-initialised-variable(pointers(objects), given))))), pattern(abstraction(map(tuple("v_end", allocate-initialised-variable(booleans, given))))))), object-single-inheritance-feature-map(checked(dereference(first(tuple-elements(given))))), collateral()), sequential(assign(bound("end"), assigned(bound("v_end"))), assign(bound("elem"), assigned(bound("v_elem"))), assign(bound("next"), assigned(bound("v_next"))), true)))))), map(tuple("Insert", function(closure(scope(collateral(match(given, tuple(pattern(abstraction(map(tuple("this", allocate-initialised-variable(pointers(objects), given))))), pattern(abstraction(map(tuple("new_elem", allocate-initialised-variable(pointers(objects), given))))))), object-single-inheritance-feature-map(checked(dereference(first(tuple-elements(given))))), collateral(map(tuple("ret_val", allocate-initialised-variable(booleans, false))), map(tuple("aux03", allocate-initialised-variable(pointers(objects), pointer-null))), map(tuple("aux02", allocate-initialised-variable(pointers(objects), pointer-null))))), sequential(assign(bound("aux03"), assigned(bound("this"))), assign(bound("aux02"), force(class-instantiator(bound("List")))), assign(bound("ret_val"), give(assigned(bound("aux02")), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "InitNew"), tuple(given, assigned(bound("new_elem")), assigned(bound("aux03")), false)))), assigned(bound("aux02")))))))), map(tuple("SetNext", function(closure(scope(collateral(match(given, tuple(pattern(abstraction(map(tuple("this", allocate-initialised-variable(pointers(objects), given))))), pattern(abstraction(map(tuple("v_next", allocate-initialised-variable(pointers(objects), given))))))), object-single-inheritance-feature-map(checked(dereference(first(tuple-elements(given))))), collateral()), sequential(assign(bound("next"), assigned(bound("v_next"))), true)))))), map(tuple("Delete", function(closure(scope(collateral(match(given, tuple(pattern(abstraction(map(tuple("this", allocate-initialised-variable(pointers(objects), given))))), pattern(abstraction(map(tuple("e", allocate-initialised-variable(pointers(objects), given))))))), object-single-inheritance-feature-map(checked(dereference(first(tuple-elements(given))))), collateral(map(tuple("my_head", allocate-initialised-variable(pointers(objects), pointer-null))), map(tuple("ret_val", allocate-initialised-variable(booleans, false))), map(tuple("aux05", allocate-initialised-variable(booleans, false))), map(tuple("aux01", allocate-initialised-variable(pointers(objects), pointer-null))), map(tuple("prev", allocate-initialised-variable(pointers(objects), pointer-null))), map(tuple("var_end", allocate-initialised-variable(booleans, false))), map(tuple("var_elem", allocate-initialised-variable(pointers(objects), pointer-null))), map(tuple("aux04", allocate-initialised-variable(integers, 0))), map(tuple("nt", allocate-initialised-variable(integers, 0))))), sequential(assign(bound("my_head"), assigned(bound("this"))), assign(bound("ret_val"), false), assign(bound("aux04"), integer-subtract(0, 1)), assign(bound("aux01"), assigned(bound("this"))), assign(bound("prev"), assigned(bound("this"))), assign(bound("var_end"), assigned(bound("end"))), assign(bound("var_elem"), assigned(bound("elem"))), while-true(if-true-else(not(assigned(bound("var_end"))), not(assigned(bound("ret_val"))), false), sequential(if-true-else(give(assigned(bound("e")), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "Equal"), tuple(given, assigned(bound("var_elem"))))), sequential(assign(bound("ret_val"), true), if-true-else(integer-is-less(assigned(bound("aux04")), 0), sequential(assign(bound("my_head"), give(assigned(bound("aux01")), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "GetNext"), tuple(given))))), sequential(print(to-string(integer-subtract(0, 555)), "\n"), assign(bound("aux05"), give(assigned(bound("prev")), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "SetNext"), tuple(given, give(assigned(bound("aux01")), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "GetNext"), tuple(given))))))), print(to-string(integer-subtract(0, 555)), "\n")))), assign(bound("nt"), 0)), if-true-else(not(assigned(bound("ret_val"))), sequential(assign(bound("prev"), assigned(bound("aux01"))), assign(bound("aux01"), give(assigned(bound("aux01")), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "GetNext"), tuple(given)))), assign(bound("var_end"), give(assigned(bound("aux01")), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "GetEnd"), tuple(given)))), assign(bound("var_elem"), give(assigned(bound("aux01")), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "GetElem"), tuple(given)))), assign(bound("aux04"), 1)), assign(bound("nt"), 0)))), assigned(bound("my_head")))))))), map(tuple("Search", function(closure(scope(collateral(match(given, tuple(pattern(abstraction(map(tuple("this", allocate-initialised-variable(pointers(objects), given))))), pattern(abstraction(map(tuple("e", allocate-initialised-variable(pointers(objects), given))))))), object-single-inheritance-feature-map(checked(dereference(first(tuple-elements(given))))), collateral(map(tuple("int_ret_val", allocate-initialised-variable(integers, 0))), map(tuple("aux01", allocate-initialised-variable(pointers(objects), pointer-null))), map(tuple("var_elem", allocate-initialised-variable(pointers(objects), pointer-null))), map(tuple("var_end", allocate-initialised-variable(booleans, false))), map(tuple("nt", allocate-initialised-variable(integers, 0))))), sequential(assign(bound("int_ret_val"), 0), assign(bound("aux01"), assigned(bound("this"))), assign(bound("var_end"), assigned(bound("end"))), assign(bound("var_elem"), assigned(bound("elem"))), while-true(not(assigned(bound("var_end"))), sequential(if-true-else(give(assigned(bound("e")), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "Equal"), tuple(given, assigned(bound("var_elem"))))), sequential(assign(bound("int_ret_val"), 1)), assign(bound("nt"), 0)), assign(bound("aux01"), give(assigned(bound("aux01")), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "GetNext"), tuple(given)))), assign(bound("var_end"), give(assigned(bound("aux01")), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "GetEnd"), tuple(given)))), assign(bound("var_elem"), give(assigned(bound("aux01")), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "GetElem"), tuple(given)))))), assigned(bound("int_ret_val")))))))), map(tuple("GetEnd", function(closure(scope(collateral(match(given, tuple(pattern(abstraction(map(tuple("this", allocate-initialised-variable(pointers(objects), given))))))), object-single-inheritance-feature-map(checked(dereference(first(tuple-elements(given))))), collateral()), sequential(assigned(bound("end")))))))), map(tuple("GetElem", function(closure(scope(collateral(match(given, tuple(pattern(abstraction(map(tuple("this", allocate-initialised-variable(pointers(objects), given))))))), object-single-inheritance-feature-map(checked(dereference(first(tuple-elements(given))))), collateral()), sequential(assigned(bound("elem")))))))), map(tuple("GetNext", function(closure(scope(collateral(match(given, tuple(pattern(abstraction(map(tuple("this", allocate-initialised-variable(pointers(objects), given))))))), object-single-inheritance-feature-map(checked(dereference(first(tuple-elements(given))))), collateral()), sequential(assigned(bound("next")))))))), map(tuple("Print", function(closure(scope(collateral(match(given, tuple(pattern(abstraction(map(tuple("this", allocate-initialised-variable(pointers(objects), given))))))), object-single-inheritance-feature-map(checked(dereference(first(tuple-elements(given))))), collateral(map(tuple("aux01", allocate-initialised-variable(pointers(objects), pointer-null))), map(tuple("var_end", allocate-initialised-variable(booleans, false))), map(tuple("var_elem", allocate-initialised-variable(pointers(objects), pointer-null))))), sequential(assign(bound("aux01"), assigned(bound("this"))), assign(bound("var_end"), assigned(bound("end"))), assign(bound("var_elem"), assigned(bound("elem"))), while-true(not(assigned(bound("var_end"))), sequential(print(to-string(give(assigned(bound("var_elem")), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "GetAge"), tuple(given)))), "\n"), assign(bound("aux01"), give(assigned(bound("aux01")), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "GetNext"), tuple(given)))), assign(bound("var_end"), give(assigned(bound("aux01")), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "GetEnd"), tuple(given)))), assign(bound("var_elem"), give(assigned(bound("aux01")), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "GetElem"), tuple(given)))))), true)))))))))), map(tuple("LL", class(thunk(closure(reference(object(fresh-atom, "LL", collateral())))), collateral(map(tuple("Start", function(closure(scope(collateral(match(given, tuple(pattern(abstraction(map(tuple("this", allocate-initialised-variable(pointers(objects), given))))))), object-single-inheritance-feature-map(checked(dereference(first(tuple-elements(given))))), collateral(map(tuple("head", allocate-initialised-variable(pointers(objects), pointer-null))), map(tuple("last_elem", allocate-initialised-variable(pointers(objects), pointer-null))), map(tuple("aux01", allocate-initialised-variable(booleans, false))), map(tuple("el01", allocate-initialised-variable(pointers(objects), pointer-null))), map(tuple("el02", allocate-initialised-variable(pointers(objects), pointer-null))), map(tuple("el03", allocate-initialised-variable(pointers(objects), pointer-null))))), sequential(assign(bound("last_elem"), force(class-instantiator(bound("List")))), assign(bound("aux01"), give(assigned(bound("last_elem")), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "Init"), tuple(given)))), assign(bound("head"), assigned(bound("last_elem"))), assign(bound("aux01"), give(assigned(bound("head")), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "Init"), tuple(given)))), assign(bound("aux01"), give(assigned(bound("head")), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "Print"), tuple(given)))), assign(bound("el01"), force(class-instantiator(bound("Element")))), assign(bound("aux01"), give(assigned(bound("el01")), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "Init"), tuple(given, 25, 37000, false)))), assign(bound("head"), give(assigned(bound("head")), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "Insert"), tuple(given, assigned(bound("el01")))))), assign(bound("aux01"), give(assigned(bound("head")), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "Print"), tuple(given)))), print(to-string(10000000), "\n"), assign(bound("el01"), force(class-instantiator(bound("Element")))), assign(bound("aux01"), give(assigned(bound("el01")), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "Init"), tuple(given, 39, 42000, true)))), assign(bound("el02"), assigned(bound("el01"))), assign(bound("head"), give(assigned(bound("head")), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "Insert"), tuple(given, assigned(bound("el01")))))), assign(bound("aux01"), give(assigned(bound("head")), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "Print"), tuple(given)))), print(to-string(10000000), "\n"), assign(bound("el01"), force(class-instantiator(bound("Element")))), assign(bound("aux01"), give(assigned(bound("el01")), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "Init"), tuple(given, 22, 34000, false)))), assign(bound("head"), give(assigned(bound("head")), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "Insert"), tuple(given, assigned(bound("el01")))))), assign(bound("aux01"), give(assigned(bound("head")), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "Print"), tuple(given)))), assign(bound("el03"), force(class-instantiator(bound("Element")))), assign(bound("aux01"), give(assigned(bound("el03")), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "Init"), tuple(given, 27, 34000, false)))), print(to-string(give(assigned(bound("head")), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "Search"), tuple(given, assigned(bound("el02")))))), "\n"), print(to-string(give(assigned(bound("head")), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "Search"), tuple(given, assigned(bound("el03")))))), "\n"), print(to-string(10000000), "\n"), assign(bound("el01"), force(class-instantiator(bound("Element")))), assign(bound("aux01"), give(assigned(bound("el01")), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "Init"), tuple(given, 28, 35000, false)))), assign(bound("head"), give(assigned(bound("head")), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "Insert"), tuple(given, assigned(bound("el01")))))), assign(bound("aux01"), give(assigned(bound("head")), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "Print"), tuple(given)))), print(to-string(2220000), "\n"), assign(bound("head"), give(assigned(bound("head")), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "Delete"), tuple(given, assigned(bound("el02")))))), assign(bound("aux01"), give(assigned(bound("head")), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "Print"), tuple(given)))), print(to-string(33300000), "\n"), assign(bound("head"), give(assigned(bound("head")), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "Delete"), tuple(given, assigned(bound("el01")))))), assign(bound("aux01"), give(assigned(bound("head")), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "Print"), tuple(given)))), print(to-string(44440000), "\n"), 0)))))))))))), print(to-string(give(force(class-instantiator(bound("LL"))), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "Start"), tuple(given)))), "\n"))))))